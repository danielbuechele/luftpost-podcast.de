import Head from 'next/head';
import styles from '@/styles/Home.module.css';
import {GetStaticProps} from 'next';
import {Episode as EpisodeT, allEpisodes} from 'contentlayer/generated';
import Episode from '../components/Episode';
import {Layer, Map, Marker, Source, ViewStateChangeEvent} from 'react-map-gl';
import Page from '@/components/Page';
import Image from 'next/image';
import marker from '@/../public/marker.png';
import Supercluster from 'supercluster';
import {useCallback, useEffect, useMemo, useState} from 'react';

type Props = {
  episodes: EpisodeT[];
};

const clusterMaxZoom = 14;
const clusterRadius = 20;

export default function Home(props: Props) {
  const [visibleMarkers, setVisibleMarkers] = useState<EpisodeT[]>([]);

  const sc = useMemo(
    () =>
      new Supercluster({
        map: (props) => ({sum: props.myValue}),
        reduce: (accumulated, props) => {
          accumulated.sum += props.sum;
        },
        maxZoom: clusterMaxZoom,
        radius: clusterRadius,
      }),
    [],
  );

  const features = useMemo(
    () =>
      props.episodes.map((e) => ({
        type: 'Feature' as const,
        id: e._id,
        properties: e,
        geometry: {
          coordinates: [e.longitude, e.latitude],
          type: 'Point' as const,
        },
      })),
    [props.episodes],
  );

  useEffect(() => {
    sc.load(features);
  }, [sc, features]);

  const onZoom = useCallback(
    (e: ViewStateChangeEvent) => {
      const leaves = sc
        .getClusters([-180, -85, 180, 85], e.viewState.zoom)
        .map((c) => {
          if (c.properties.title) {
            return c.properties;
          }
        })
        .filter(Boolean);

      setVisibleMarkers(leaves);
    },
    [sc],
  );

  return (
    <Page
      aside={
        <Map
          mapboxAccessToken="pk.eyJ1IjoiZGFuaWVsYnVlY2hlbGUiLCJhIjoiY2xkMjZoMmZiMDVvcjN1bWxmNHNwYXgweSJ9.tLy3xz0r55-30Vtqg3V6NA"
          initialViewState={{
            longitude: 0,
            latitude: 25,
            zoom: 2,
          }}
          mapStyle="mapbox://styles/danielbuechele/cjqcdcl08ejiv2sn1y35nc9du"
          onZoom={onZoom}
        >
          {visibleMarkers.map((e) => (
            <Marker
              key={e._id}
              latitude={e.latitude}
              longitude={e.longitude}
              anchor="bottom"
              onClick={(e) => {
                // TODO
              }}
            >
              <Image src={marker} alt={e.title} width={43} />
            </Marker>
          ))}
          <Source
            id="episodes"
            cluster={true}
            clusterMaxZoom={clusterMaxZoom}
            clusterRadius={clusterRadius}
            type="geojson"
            data={{
              type: 'FeatureCollection',
              features,
            }}
          >
            <Layer
              type="circle"
              source="episodes"
              filter={['has', 'point_count']}
              paint={{
                'circle-color': [
                  'step',
                  ['get', 'point_count'],
                  '#fff',
                  100,
                  '#ff0000',
                  750,
                  '#00ff00',
                ],
                'circle-radius': [
                  'step',
                  ['get', 'point_count'],
                  20,
                  100,
                  30,
                  750,
                  40,
                ],
              }}
            />
          </Source>
        </Map>
      }
    >
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.container}>
        <aside className={styles.map}></aside>
        <main>
          {props.episodes.map((e) => (
            <Episode episode={e} key={e._id} />
          ))}
        </main>
      </div>
    </Page>
  );
}

export const getStaticProps: GetStaticProps<Props> = async (context) => ({
  props: {
    episodes: allEpisodes,
  },
});
